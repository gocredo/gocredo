type Product {
  id: ID!
  businessId: ID!
  name: String!
  price: Float!
  stock: Int
  tags: [String]
  description: String
  imageUrl: String
  createdAt: String!
  updatedAt: String!
}

input ProductFilterInput {
  nameContains: String
  tagsIn: [String!]
  businessId: String
  minPrice: Float
  maxPrice: Float
}

input PaginationInput {
  limit: Int
  offset: Int
}

input ProductSortInput {
  field: ProductSortableField
  order: SortOrder
}

enum ProductSortableField {
  name
  price
  createdAt
}

enum SortOrder {
  ASC
  DESC
}


extend type Query{
  product(id: ID!): Product!
  products(
    filter: ProductFilterInput
    pagination: PaginationInput
    sort: ProductSortInput
  ): [Product!]!
}

extend type Mutation{
    createProduct(
    businessId: ID!
    name: String!
    price: Float!
    stock: Int
    tags: [String!]
    description: String
    imageUrl: String!
  ): Product!
  updateProduct(
    id: ID!
    name: String
    price: Float
    stock: Int
    tags: [String!]
    description: String
    imageUrl: String
  ): Product!
  deleteProduct(id: ID!): Boolean!
}
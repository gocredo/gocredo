

generator client {
  provider = "prisma-client-js"
 
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  clientId   String
  client     Client   @relation(fields: [clientId], references: [id])
  name      String
  email     String   @unique
  password  String
  role      String   // e.g., 'admin', 'developer', 'sales'
  createdAt DateTime @default(now())
}

model Client {
  id         String    @id @default(uuid())
  name       String
  email      String    @unique
  phone      String?
  websites   Website[]
  createdAt  DateTime  @default(now())
}

model Website {
  id         String   @id @default(uuid())
  clientId   String
  client     Client   @relation(fields: [clientId], references: [id])
  name       String
  domain     String   @unique  // abc.com, etc.
  theme      Json?    // colors, fonts, layout config
  logoUrl    String?
  products   Product[]
  orders     Order[]
  cart       Cart?
  lead       Lead[]
  createdAt  DateTime @default(now())
}

model Cart {
  id         String    @id @default(uuid())
  clientId   String
  client     Client   @relation(fields: [clientId], references: [id])
  websiteId  String    @unique
  website    Website   @relation(fields: [websiteId], references: [id])
  items      CartItem[]
  order      Order[]
  createdAt  DateTime  @default(now())
}



model Product {
  id          String   @id @default(uuid())
  clientId   String
  client     Client   @relation(fields: [clientId], references: [id])
  websiteId   String
  website     Website @relation(fields: [websiteId], references: [id])
  name        String
  description String?
  price       Float
  imageUrl    String?
  Stock       Int      @default(0)
  inStock     Boolean  @default(true)
  cartsItem   CartItem[]
  reviews     ProductReview[]
}

model ProductReview {
  id         String   @id @default(uuid())
  clientId   String
  client     Client   @relation(fields: [clientId], references: [id])
  productId  String
  product    Product @relation(fields: [productId], references: [id])
  customerId String
  rating     Int      // 1 to 5 stars
  comment    String?
  createdAt  DateTime @default(now())
}


model CartItem {
  id         String   @id @default(uuid())
  clientId   String
  client     Client   @relation(fields: [clientId], references: [id])
  cartId     String
  cart       Cart     @relation(fields: [cartId], references: [id])
  productId  String
  product    Product  @relation(fields: [productId], references: [id])
  quantity   Int      @default(1)
  price      Float
  createdAt  DateTime @default(now())
}

model Order {
  id          String   @id @default(uuid())
  websiteId   String
  website     Website @relation(fields: [websiteId], references: [id])
  customer    String
  email       String
  products    Json     // List of product ids and quantity
  totalAmount Float
  status      String   // pending, paid, failed
  cartId      String   // FK for the cart converted into order
  cart        Cart     @relation(fields: [cartId], references: [id])
  payment     Payment[]
  createdAt   DateTime @default(now())
}

model Payment {
  id         String   @id @default(uuid())
  orderId    String
  order      Order    @relation(fields: [orderId], references: [id])
  clientId   String
  client     Client   @relation(fields: [clientId], references: [id])
  amount     Float
  method     String   // Razorpay, Stripe, etc.
  status     String   // success, failed, pending
  provider   String   // Payment provider
  createdAt  DateTime @default(now())
}

model Lead {
  id         String   @id @default(uuid())
  websiteId  String
  clientId   String
  client     Client   @relation(fields: [clientId], references: [id])
  website    Website @relation(fields: [websiteId], references: [id])
  name       String
  email      String
  message    String
  createdAt  DateTime @default(now())
}

model ClientCustomer {
  id         String   @id @default(uuid())
  clientId   String
  client     Client   @relation(fields: [clientId], references: [id])
  websiteId  String
  name       String
  password   String
  email      String
  username   String   @unique
  createdAt  DateTime @default(now())
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String     @id @default(uuid())
  email       String     @unique
  name        String
  role        Role       @default(BUSINESS_OWNER)
  businessId  String?
  websiteURLs String[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  clerkId     String     @unique  
  auditLogs   AuditLog[]
  business    Business?  @relation(fields: [businessId], references: [id])
}

model Business {
  id                 String            @id @default(uuid())
  name               String
  category           BusinessCategory
  description        String?
  address            String?
  phone              String?
  websiteUrl         String?
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  businessSettingsId String?
  about              AboutPage?
  appointments       Appointment[]
  auditLogs          AuditLog[]
  blogs              Blog[]
  bookings           Booking[]
  branches           Branch[]
  businessSetting    BusinessSettings? @relation("BusinessToBusinessSettings")
  customers          CustomerUser[]
  donations          Donation[]
  inquiries          Inquiry[]
  invitations        Invitation[]
  galleries          MediaGallery[]
  menus              Menu[]
  orders             Order[]
  payments           Payment[]
  products           Product[]
  properties         Property[]
  reviews            Review[]
  Subscription       Subscription[]
  users              User[]
}

model Branch {
  id          String        @id @default(uuid())
  name        String
  address     String
  city        String
  state       String
  pincode     String
  phone       String?
  businessId  String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  business    Business      @relation(fields: [businessId], references: [id])
  appointment Appointment[] @relation("AppointmentToBranch")
}

model CustomerUser {
  id           String        @id @default(uuid())
  name         String
  email        String?
  phone        String?
  businessId   String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  clerkId      String        @unique
  appointments Appointment[]
  business     Business      @relation(fields: [businessId], references: [id])
  orders       Order[]
  reviews      Review[]
}

model Payment {
  id                String        @id @default(uuid())
  amount            Float
  method            PaymentMethod
  status            PaymentStatus @default(PENDING)
  initiatedAt       DateTime
  verifiedAt        DateTime?
  paidAt            DateTime?
  referenceId       String?
  razorpayOrderId   String?
  razorpayPaymentId String?
  razorpaySignature String?
  receiptURL        String?
  customerRole      Role
  customerName      String?
  customerEmail     String?
  businessId        String
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  business          Business      @relation(fields: [businessId], references: [id])
}

model Menu {
  id         String     @id @default(uuid())
  title      String
  businessId String
  business   Business   @relation(fields: [businessId], references: [id])
  items      MenuItem[]
}

model MenuItem {
  id       String  @id @default(uuid())
  name     String
  price    Float
  imageUrl String?
  menuId   String
  menu     Menu    @relation(fields: [menuId], references: [id])
}

model Appointment {
  id             String            @id @default(uuid())
  customerName   String
  customerPhone  String?
  customerEmail  String?
  dateTime       DateTime
  service        String
  status         AppointmentStatus @default(PENDING)
  businessId     String
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  branchId       String
  customerUserId String
  business       Business          @relation(fields: [businessId], references: [id])
  customerUser   CustomerUser      @relation(fields: [customerUserId], references: [id])
  branch         Branch[]          @relation("AppointmentToBranch")
}

model Product {
  id          String   @id @default(uuid())
  name        String
  price       Float
  stock       Int?
  tags        String[]
  description String?
  imageUrl    String
  businessId  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  business    Business @relation(fields: [businessId], references: [id])
}

model Review {
  id              String        @id @default(uuid())
  rating          Int
  comment         String?
  businessId      String
  customerUserId  String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  business        Business      @relation(fields: [businessId], references: [id])
  customerUser    CustomerUser  @relation(fields: [customerUserId], references: [id])
}


model Booking {
  id           String   @id @default(uuid())
  dateTime     DateTime
  customerName String
  service      String
  businessId   String
  business     Business @relation(fields: [businessId], references: [id])
}

model MediaGallery {
  id         String   @id @default(uuid())
  title      String
  mediaUrls  String[]
  businessId String
  business   Business @relation(fields: [businessId], references: [id])
}

model Inquiry {
  id         String   @id @default(uuid())
  name       String
  email      String
  message    String
  businessId String
  business   Business @relation(fields: [businessId], references: [id])
}

model BusinessInquiry {
  id      String @id @default(uuid())
  name    String
  email   String
  phone   String
  message String
}

model Property {
  id          String   @id @default(uuid())
  title       String
  description String
  price       Float
  location    String
  imageUrl    String?
  businessId  String
  business    Business @relation(fields: [businessId], references: [id])
}

model Donation {
  id         String   @id @default(uuid())
  donorName  String
  amount     Float
  date       DateTime
  businessId String
  business   Business @relation(fields: [businessId], references: [id])
}

model Blog {
  id         String   @id @default(uuid())
  title      String
  content    String
  imageUrl   String?
  businessId String
  createdAt  DateTime @default(now())
  business   Business @relation(fields: [businessId], references: [id])
  updatedAt  DateTime @updatedAt
}

model Order {
  id             String        @id @default(uuid())
  type           OrderType
  items          Json
  totalAmount    Float
  status         OrderStatus   @default(PENDING)
  customerUserId String?
  businessId     String
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  business       Business      @relation(fields: [businessId], references: [id])
  customerUser   CustomerUser? @relation(fields: [customerUserId], references: [id])
}

model AuditLog {
  id         String   @id @default(uuid())
  action     String
  userId     String
  businessId String
  timestamp  DateTime @default(now())
  business   Business @relation(fields: [businessId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
}

model Invitation {
  id         String   @id @default(uuid())
  email      String
  role       String
  token      String   @unique
  businessId String
  expiresAt  DateTime
  business   Business @relation(fields: [businessId], references: [id])
}

model BusinessSettings {
  id         String   @id @default(uuid())
  businessId String   @unique
  currency   String   @default("USD")
  timezone   String?
  logoUrl    String?
  business   Business @relation("BusinessToBusinessSettings", fields: [businessId], references: [id])
}

model Plan {
  id            String         @id @default(uuid())
  name          String
  description   String?
  price         Float
  features      String[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  subscriptions Subscription[]
}

model Subscription {
  id          String             @id @default(uuid())
  businessId  String
  planId      String
  startDate   DateTime           @default(now())
  endDate     DateTime?
  status      SubscriptionStatus @default(ACTIVE)
  lastRenewed DateTime?
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  business    Business           @relation(fields: [businessId], references: [id])
  plan        Plan               @relation(fields: [planId], references: [id])
}

model AboutPage {
  id          String   @id @default(cuid())
  businessId  String   @unique
  description String?
  mission     String?
  vision      String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  business    Business @relation(fields: [businessId], references: [id])
}

enum Role {
  ADMIN
  BUSINESS_OWNER
  STAFF
}

enum BusinessCategory {
  RESTAURANT
  SALON
  BOUTIQUE
  TIFFIN
  GYM
  EVENT_PLANNER
  COACHING
  INTERIOR
  PHOTOGRAPHER
  REPAIR_SERVICE
  REAL_ESTATE
  PET_SERVICE
  HANDICRAFT
  FLORIST
  CLINIC
  TRAVEL
  FREELANCER
  BAKER
  NGO
  JEWELLERY
}

enum PaymentMethod {
  CARD
  UPI
  CASH
  WALLET
  NETBANKING
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
  REFUNDED
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELLED
}

enum OrderType {
  PRODUCT
  MENU_ITEM
  APPOINTMENT
  DONATION
  CUSTOM
}

enum OrderStatus {
  PENDING
  PAID
  CANCELLED
  FULFILLED
}

enum SubscriptionStatus {
  ACTIVE
  INACTIVE
}
